/*
<<<<<<< HEAD
=======
<<<<<<< HEAD
>>>>>>> ef2ab6295a3053865d54c2bdb992ca1d99d638cb
 *   This program is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation, either version 3 of the License, or
 *   (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with this program.  If not, see <http://www.gnu.org/licenses/>.
<<<<<<< HEAD
=======
=======
 *    This program is free software; you can redistribute it and/or modify
 *    it under the terms of the GNU General Public License as published by
 *    the Free Software Foundation; either version 2 of the License, or
 *    (at your option) any later version.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    GNU General Public License for more details.
 *
 *    You should have received a copy of the GNU General Public License
 *    along with this program; if not, write to the Free Software
 *    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
>>>>>>> 25da024d9b6316e99e1931459ffa9a6f3d5c90eb
>>>>>>> ef2ab6295a3053865d54c2bdb992ca1d99d638cb
 */

/*
 *    TrainingSetMaker.java
<<<<<<< HEAD
 *    Copyright (C) 2002-2012 University of Waikato, Hamilton, New Zealand
=======
<<<<<<< HEAD
 *    Copyright (C) 2002-2012 University of Waikato, Hamilton, New Zealand
=======
 *    Copyright (C) 2002 University of Waikato, Hamilton, New Zealand
>>>>>>> 25da024d9b6316e99e1931459ffa9a6f3d5c90eb
>>>>>>> ef2ab6295a3053865d54c2bdb992ca1d99d638cb
 *
 */

package weka.gui.beans;

import java.io.Serializable;
import java.util.Vector;

<<<<<<< HEAD
import weka.core.Instances;

=======
<<<<<<< HEAD
import weka.core.Instances;

=======
>>>>>>> 25da024d9b6316e99e1931459ffa9a6f3d5c90eb
>>>>>>> ef2ab6295a3053865d54c2bdb992ca1d99d638cb
/**
 * Bean that accepts a data sets and produces a training set
 * 
 * @author <a href="mailto:mhall@cs.waikato.ac.nz">Mark Hall</a>
<<<<<<< HEAD
=======
<<<<<<< HEAD
>>>>>>> ef2ab6295a3053865d54c2bdb992ca1d99d638cb
 * @version $Revision: 10216 $
 */
public class TrainingSetMaker extends AbstractTrainingSetProducer implements
  DataSourceListener, TestSetListener, EventConstraints, Serializable,
  StructureProducer {
<<<<<<< HEAD
=======
=======
 * @version $Revision: 9751 $
 */
public class TrainingSetMaker extends AbstractTrainingSetProducer implements
    DataSourceListener, TestSetListener, EventConstraints, Serializable {
>>>>>>> 25da024d9b6316e99e1931459ffa9a6f3d5c90eb
>>>>>>> ef2ab6295a3053865d54c2bdb992ca1d99d638cb

  /** for serialization */
  private static final long serialVersionUID = -6152577265471535786L;

  protected boolean m_receivedStopNotification = false;

  public TrainingSetMaker() {
    m_visual.loadIcons(BeanVisual.ICON_PATH + "TrainingSetMaker.gif",
<<<<<<< HEAD
      BeanVisual.ICON_PATH + "TrainingSetMaker_animated.gif");
=======
<<<<<<< HEAD
      BeanVisual.ICON_PATH + "TrainingSetMaker_animated.gif");
=======
        BeanVisual.ICON_PATH + "TrainingSetMaker_animated.gif");
>>>>>>> 25da024d9b6316e99e1931459ffa9a6f3d5c90eb
>>>>>>> ef2ab6295a3053865d54c2bdb992ca1d99d638cb
    m_visual.setText("TrainingSetMaker");
  }

  /**
<<<<<<< HEAD
=======
<<<<<<< HEAD
>>>>>>> ef2ab6295a3053865d54c2bdb992ca1d99d638cb
   * Get the structure of the output encapsulated in the named event. If the
   * structure can't be determined in advance of seeing input, or this
   * StructureProducer does not generate the named event, null should be
   * returned.
   * 
   * @param eventName the name of the output event that encapsulates the
   *          requested output.
   * 
   * @return the structure of the output encapsulated in the named event or null
   *         if it can't be determined in advance of seeing input or the named
   *         event is not generated by this StructureProduce.
   */
  @Override
  public Instances getStructure(String eventName) {
    if (!eventName.equals("dataSet")) {
      return null;
    }
    if (m_listenee == null) {
      return null;
    }
    if (m_listenee != null && m_listenee instanceof StructureProducer) {
      return ((StructureProducer) m_listenee).getStructure("dataSet");
    }
    return null;
  }

  /**
<<<<<<< HEAD
=======
=======
>>>>>>> 25da024d9b6316e99e1931459ffa9a6f3d5c90eb
>>>>>>> ef2ab6295a3053865d54c2bdb992ca1d99d638cb
   * Set a custom (descriptive) name for this bean
   * 
   * @param name the name to use
   */
  @Override
  public void setCustomName(String name) {
    m_visual.setText(name);
  }

  /**
   * Get the custom (descriptive) name for this bean (if one has been set)
   * 
   * @return the custom name (or the default name)
   */
  @Override
  public String getCustomName() {
    return m_visual.getText();
  }

  /**
   * Global info for this bean
   * 
   * @return a <code>String</code> value
   */
  public String globalInfo() {
<<<<<<< HEAD
    return "Designate an incoming data set as a training set.";
=======
<<<<<<< HEAD
    return "Designate an incoming data set as a training set.";
=======
    return Messages.getInstance().getString("TrainingSetMaker_GlobalInfo_Text");
>>>>>>> 25da024d9b6316e99e1931459ffa9a6f3d5c90eb
>>>>>>> ef2ab6295a3053865d54c2bdb992ca1d99d638cb
  }

  /**
   * Accept a data set
   * 
   * @param e a <code>DataSetEvent</code> value
   */
  @Override
  public void acceptDataSet(DataSetEvent e) {
    m_receivedStopNotification = false;
    TrainingSetEvent tse = new TrainingSetEvent(this, e.getDataSet());
    tse.m_setNumber = 1;
    tse.m_maxSetNumber = 1;
    notifyTrainingSetProduced(tse);
  }

  @Override
  public void acceptTestSet(TestSetEvent e) {
    m_receivedStopNotification = false;
    TrainingSetEvent tse = new TrainingSetEvent(this, e.getTestSet());
    tse.m_setNumber = 1;
    tse.m_maxSetNumber = 1;
    notifyTrainingSetProduced(tse);
  }

  /**
   * Inform training set listeners that a training set is available
   * 
   * @param tse a <code>TrainingSetEvent</code> value
   */
<<<<<<< HEAD
=======
<<<<<<< HEAD
>>>>>>> ef2ab6295a3053865d54c2bdb992ca1d99d638cb
  @SuppressWarnings("unchecked")
  protected void notifyTrainingSetProduced(TrainingSetEvent tse) {
    Vector<TrainingSetListener> l;
    synchronized (this) {
      l = (Vector<TrainingSetListener>) m_listeners.clone();
<<<<<<< HEAD
=======
=======
  protected void notifyTrainingSetProduced(TrainingSetEvent tse) {
    Vector l;
    synchronized (this) {
      l = (Vector) m_listeners.clone();
>>>>>>> 25da024d9b6316e99e1931459ffa9a6f3d5c90eb
>>>>>>> ef2ab6295a3053865d54c2bdb992ca1d99d638cb
    }
    if (l.size() > 0) {
      for (int i = 0; i < l.size(); i++) {
        if (m_receivedStopNotification) {
          if (m_logger != null) {
<<<<<<< HEAD
            m_logger.logMessage("T[rainingSetMaker] " + statusMessagePrefix()
              + " stopping.");
            m_logger.statusMessage(statusMessagePrefix() + "INTERRUPTED");
=======
<<<<<<< HEAD
            m_logger.logMessage("T[rainingSetMaker] " + statusMessagePrefix()
              + " stopping.");
            m_logger.statusMessage(statusMessagePrefix() + "INTERRUPTED");
=======
            m_logger
                .logMessage(Messages
                    .getInstance()
                    .getString(
                        "TrainingSetMaker_NotifyTrainingSetProduced_LogMessage_Text_First")
                    + statusMessagePrefix()
                    + Messages
                        .getInstance()
                        .getString(
                            "TrainingSetMaker_NotifyTrainingSetProduced_LogMessage_Text_Second"));
            m_logger
                .statusMessage(statusMessagePrefix()
                    + Messages
                        .getInstance()
                        .getString(
                            "TrainingSetMaker_NotifyTrainingSetProduced_LogMessage_Text_Third"));
>>>>>>> 25da024d9b6316e99e1931459ffa9a6f3d5c90eb
>>>>>>> ef2ab6295a3053865d54c2bdb992ca1d99d638cb
          }
          m_receivedStopNotification = false;
          break;
        }
<<<<<<< HEAD
        System.err.println("Notifying listeners (training set maker)");
        l.elementAt(i).acceptTrainingSet(tse);
=======
<<<<<<< HEAD
        System.err.println("Notifying listeners (training set maker)");
        l.elementAt(i).acceptTrainingSet(tse);
=======
        System.err.println(Messages.getInstance().getString(
            "TrainingSetMaker_NotifyTrainingSetProduced_Error_Text"));
        ((TrainingSetListener) l.elementAt(i)).acceptTrainingSet(tse);
>>>>>>> 25da024d9b6316e99e1931459ffa9a6f3d5c90eb
>>>>>>> ef2ab6295a3053865d54c2bdb992ca1d99d638cb
      }
    }
  }

  /**
   * Stop any action
   */
  @Override
  public void stop() {
    m_receivedStopNotification = true;

    // tell the listenee (upstream bean) to stop
    if (m_listenee instanceof BeanCommon) {
      // System.err.println("Listener is BeanCommon");
      ((BeanCommon) m_listenee).stop();
    }
  }

  /**
   * Returns true if. at this time, the bean is busy with some (i.e. perhaps a
   * worker thread is performing some calculation).
   * 
   * @return true if the bean is busy.
   */
  @Override
  public boolean isBusy() {
    return false;
  }

  /**
   * Returns true, if at the current time, the named event could be generated.
   * Assumes that supplied event names are names of events that could be
   * generated by this bean.
   * 
   * @param eventName the name of the event in question
   * @return true if the named event could be generated at this point in time
   */
  @Override
  public boolean eventGeneratable(String eventName) {
    if (m_listenee == null) {
      return false;
    }

    if (m_listenee instanceof EventConstraints) {
      if (!((EventConstraints) m_listenee).eventGeneratable("dataSet")) {
        return false;
      }
    }
    return true;
  }

  private String statusMessagePrefix() {
    return getCustomName() + "$" + hashCode() + "|";
  }
}
